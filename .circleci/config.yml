version: 2.1

parameters:
  run_development_workflow:
    default: true
    type: boolean


orbs:
  node: circleci/node@4.1
  aws-cli: circleci/aws-cli@2.0.3

references:
  node_defaults: &node_defaults
    working_directory: ~/repo
    docker:
      - image: cimg/node:18.12.1
  default_parameters_definition: &default_parameters_definition
    rollbar_post_client_item_access_token:
      type: env_var_name
    app_environment:
      type: env_var_name
    li3ib_api_base_url:
      type: env_var_name
  staging_parameters: &staging_parameters
    rollbar_post_client_item_access_token: REACT_APP_ROLLBAR_POST_CLIENT_ITEM_ACCESS_TOKEN
    app_environment: STAGING_REACT_APP_ENVIRONMENT
    li3ib_api_base_url: STAGING__REACT_APP_LI3IB_API_BASE_URL

staging__unit_test: &staging__unit_test
  - unit_test:
      name: unit_test_staging
      <<: *staging_parameters
      requires:
        - install
        - install_cc_test_coverage_reporter
      filters:
        branches:
          ignore:
            - production

jobs:
  checkout_code:
    <<: *node_defaults
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/repo
          paths:
            - .
  install:
    <<: *node_defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - restore_cache:
          keys:
            - v8-yarn-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - v8-yarn-deps-{{ .Branch }}-
            - v8-yarn-deps-
      - run: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      - save_cache:
          key: v8-yarn-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - persist_to_workspace:
          root: ~/
          paths:
            - repo

  install_cc_test_coverage_reporter:
    <<: *node_defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Download cc-test-reporter
          command: |
            cd ~
            mkdir -p tmp/
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ~/tmp/cc-test-reporter
            chmod +x ~/tmp/cc-test-reporter
      - persist_to_workspace:
          root: ~/tmp
          paths:
            - cc-test-reporter

  verify_locales:
    <<: *node_defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Verify locales
          command: |
            yarn extract
            if [[ `git diff --exit-code` ]]; then echo "Locales not extracted. Please extract and commit locale files by using 'yarn extract' command" && exit 1; fi

  lint:
    <<: *node_defaults
    steps:
      - attach_workspace:
          at: ~/
      - run: yarn lint

  type_check:
    <<: *node_defaults
    steps:
      - attach_workspace:
          at: ~/
      - run: yarn type_check

  unit_test:
    <<: *node_defaults
    parameters:
      <<: *default_parameters_definition
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Before test run
          command: ~/cc-test-reporter before-build
      - run:
          name: ls
          command: ls
      - run:
          name: Run yarn test
          command: >
            REACT_APP_ROLLBAR_POST_CLIENT_ITEM_ACCESS_TOKEN=$<< parameters.rollbar_post_client_item_access_token >>
            REACT_APP_ENVIRONMENT=$<< parameters.app_environment >>
            REACT_APP_LI3IB_API_BASE_URL=$<< parameters.li3ib_api_base_url >>
            yarn test:ci
      - run:
          name: Get coverage
          command: ~/cc-test-reporter format-coverage -t lcov -o ~/tmp/codeclimate.json ~/coverage/lcov.info
      - persist_to_workspace:
          root: ~/tmp
          paths:
            - codeclimate.json

  upload_test_coverage:
    <<: *node_defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Upload coverage results to Code Climate
          command: |
            echo ${CC_TEST_REPORTER_ID}
            ~/cc-test-reporter upload-coverage -i ~/codeclimate.json -r ${CC_TEST_REPORTER_ID}


workflows:
  development:
    when: << pipeline.parameters.run_development_workflow >>
    jobs:
      - checkout_code
      - install:
          requires:
            - checkout_code
      - install_cc_test_coverage_reporter:
          requires:
            - checkout_code
      - <<: *staging__unit_test
      - upload_test_coverage:
          requires:
            - unit_test_staging
          filters:
            branches:
              ignore:
                - production
      - verify_locales:
          requires:
            - install
      - lint:
          requires:
            - install
      - type_check:
          requires:
            - install
